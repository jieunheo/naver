@use "sass:math";
$rootUnit: 16px !default;
$breakpoint: 768px;

// 단위 제거 함수
@function removeUnit($value){
  @return math.div($value, ($value * 0 + 1));
  /* @return ($value / ($value * 0 + 1)); */
}

// px -> rem 변경 함수
@function rem($value, $base: $rootUnit){
  @return removeUnit(math.div($value, $base)) * 1rem;
  /* @return removeUnit($value / $base) * 1rem; */
}

// flexbox mixin
@mixin flexbox ($dir: row, $wrap: nowrap, $just: flex-start, $align: stretch) {
  display: flex;
  flex-direction: $dir;
  flex-wrap: $wrap;
  justify-content: $just;
  align-items: $align;
}

// flexbox center mixin
@mixin flexboxCenter ($dir: row, $wrap: nowrap, $just: center, $align: center) {
  display: flex;
  flex-direction: $dir;
  flex-wrap: $wrap;
  justify-content: $just;
  align-items: $align;
}

// media query mixin
@mixin mobile{
  @media screen and (max-width: #{$breakpoint - 1}){
    @content;
  }
}
@mixin desktop{
  @media screen and (min-width: $breakpoint){
    @content;
  }
}

// margin mixin
@mixin autoMargin {
  margin-left: auto;
  margin-right: auto;
}
@mixin marginX($left: 0, $right: $left) {
  margin-left: $left;
  margin-right: $right;
}
@mixin marginY($top: 0, $bottom: $top) {
  margin-top: $top;
  margin-bottom: $bottom;
}

// padding mixin
@mixin paddingX($left: 0, $right: $left) {
  padding-left: $left;
  padding-right: $right;
}
@mixin paddingY($top: 0, $bottom: $top) {
  padding-top: $top;
  padding-bottom: $bottom;
}

// box size + auto margin
@mixin boxFixed($width: 460px) {
  width: $width;
  @include autoMargin;
}
@mixin boxFull($width: 100vw) {
  width: $width;
  position: relative;
  left: 50%;
  margin-left: math.div(-$width, 2);
}

// a11y mixin
@mixin a11y {
  position: absolute;
  width: 1px;
  height: 1px;
  margin: -1px;
  overflow: hidden;
  visibility: hidden;
  clip: rect(0,0,0,0);
  clip-path: inset(50%);
}